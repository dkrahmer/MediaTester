<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnExceptionOccurredWhileTesting" xml:space="preserve">
    <value>An exception occurred while testing.</value>
  </data>
  <data name="AverageReadSpeed" xml:space="preserve">
    <value>Average read speed</value>
  </data>
  <data name="AverageWriteSpeed" xml:space="preserve">
    <value>Average write speed</value>
  </data>
  <data name="BeSureToDeleteTemporaryDirectory" xml:space="preserve">
    <value>Notice: Be sure to delete the temporary directory before using the media.</value>
  </data>
  <data name="ButtonNo" xml:space="preserve">
    <value>No</value>
    <comment>Button text on pop-up messagebox</comment>
  </data>
  <data name="ButtonOk" xml:space="preserve">
    <value>OK</value>
    <comment>Button text on pop-up messagebox</comment>
  </data>
  <data name="ButtonYes" xml:space="preserve">
    <value>Yes</value>
    <comment>Button text on pop-up messagebox</comment>
  </data>
  <data name="Bytes" xml:space="preserve">
    <value>Bytes</value>
  </data>
  <data name="BytesPerSecond" xml:space="preserve">
    <value>Bytes/sec</value>
  </data>
  <data name="ChangeLanguageRestart" xml:space="preserve">
    <value>Restart required to change language</value>
  </data>
  <data name="ChangeLanguageRestartDetails" xml:space="preserve">
    <value>The application must restart to change the language.
Any unsaved settings will be lost.
Would you like to continue?</value>
  </data>
  <data name="CheckDeviceAndFolderPermissions" xml:space="preserve">
    <value>Check device and folder permissions or reconnect the drive and retry.</value>
  </data>
  <data name="ContinueWithTest" xml:space="preserve">
    <value>MediaTester works best if the target media is empty.
Continue with non-destructive test?</value>
    <comment>Start test dialog body</comment>
  </data>
  <data name="ErrorLoadingOptions" xml:space="preserve">
    <value>Error Loading Options</value>
  </data>
  <data name="ErrorLoadingOptionsDetails" xml:space="preserve">
    <value>Error loading options config file.
Continuing with defaults.</value>
  </data>
  <data name="ExceptionWhileRemovingTempFiles" xml:space="preserve">
    <value>An exception occurred while removing temporary data file.</value>
  </data>
  <data name="Fail" xml:space="preserve">
    <value>FAIL</value>
    <comment>Used in results filename</comment>
  </data>
  <data name="FailedBlockByteIndex" xml:space="preserve">
    <value>FAILED block {AbsoluteDataBlockIndex}! Byte index: {AbsoluteDataByteIndex}</value>
  </data>
  <data name="FailedWritingBlock" xml:space="preserve">
    <value>FAILED writing block {AbsoluteDataBlockIndex}. Byte index: {AbsoluteDataByteIndex}.</value>
  </data>
  <data name="IdentifyingFirstFailingByte" xml:space="preserve">
    <value>Identifying first failing byte...</value>
  </data>
  <data name="InvalidLanguage" xml:space="preserve">
    <value>Invalid Language</value>
  </data>
  <data name="InvalidLanguageDetails" xml:space="preserve">
    <value>The configured language name ({InvalidLanguageName}) is invalid.
The system default will be used: {DefaultLanguageName}</value>
  </data>
  <data name="InvalidTarget" xml:space="preserve">
    <value>Invalid target</value>
    <comment>Invalid target dialog title</comment>
  </data>
  <data name="MediaTestFailed" xml:space="preserve">
    <value>Media test FAILED! First failing byte: {FirstFailingByteIndex}. Verified {TotalBytesVerified} Bytes.</value>
  </data>
  <data name="MediaTestPassed" xml:space="preserve">
    <value>Media test PASSED!</value>
  </data>
  <data name="NotEnoughFreeSpaceToWrite" xml:space="preserve">
    <value>Not enough free space to write test results file</value>
  </data>
  <data name="Pass" xml:space="preserve">
    <value>PASS</value>
    <comment>Used in results filename</comment>
  </data>
  <data name="QuickTest" xml:space="preserve">
    <value>Quick test</value>
  </data>
  <data name="Read" xml:space="preserve">
    <value>Read</value>
  </data>
  <data name="RemovedTempDataFile" xml:space="preserve">
    <value>Removed {FilesDeleted} temp data file.</value>
  </data>
  <data name="RemovedTempDataFiles" xml:space="preserve">
    <value>Removed {FilesDeleted} temp data files.</value>
  </data>
  <data name="RemovingTempDataFiles" xml:space="preserve">
    <value>Removing temp data files...</value>
  </data>
  <data name="ResultsFilename" xml:space="preserve">
    <value>MediaTesterResults_{DateTime}_{PassFail}.txt</value>
    <comment>Results filename (no spaces)</comment>
  </data>
  <data name="StartTest" xml:space="preserve">
    <value>Start test?</value>
    <comment>Start test dialog title</comment>
  </data>
  <data name="SystemDefault" xml:space="preserve">
    <value>System Default</value>
  </data>
  <data name="TemporaryDataPath" xml:space="preserve">
    <value>Temporary data path</value>
  </data>
  <data name="TheSelectedTargetIsInvalid" xml:space="preserve">
    <value>The selected target is invalid or does not exist!</value>
    <comment>Invalid target dialog body</comment>
  </data>
  <data name="TheTestWasAborted" xml:space="preserve">
    <value>The test was aborted by the user.</value>
  </data>
  <data name="TotalReportedAvailableSpace" xml:space="preserve">
    <value>Total reported available space</value>
  </data>
  <data name="TotalReportedMediaSize" xml:space="preserve">
    <value>Total reported media size</value>
  </data>
  <data name="VerifiedBlockByteIndex" xml:space="preserve">
    <value>Verified block {AbsoluteDataBlockIndex}. Byte index: {AbsoluteDataByteIndex}</value>
  </data>
  <data name="VerifiedXBytesOfXTotal" xml:space="preserve">
    <value>Verified {TotalBytesVerified} Bytes of {TargetTotalBytes} Bytes total.</value>
  </data>
  <data name="Write" xml:space="preserve">
    <value>Write</value>
  </data>
  <data name="WroteTestResultsFile" xml:space="preserve">
    <value>Wrote test results file</value>
  </data>
</root>